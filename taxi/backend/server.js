require("dotenv").config();
const express = require("express");
const setupSwagger = require('./swagger');
const swaggerDocs = require("./swagger");
const cors = require("cors");
const bodyParser = require("body-parser");
const db = require("./config/db");
const http = require("http");
const { Server } = require("socket.io");
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const compression = require("compression");
const morgan = require("morgan");

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*", methods: ["GET", "POST"] } });

// âœ… Exporter `io` immÃ©diatement pour Ã©viter les erreurs de dÃ©pendance circulaire
module.exports = { app, server, io };

// âœ… Configuration de Swagger
setupSwagger(app);
swaggerDocs(app);

// âœ… Middleware Globaux
app.use(cors());
app.use(bodyParser.json());
app.use(express.json());
app.use(helmet());
app.use(compression());
app.use(morgan("dev"));

// âœ… Limitation de RequÃªtes (Rate Limiting)
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000,
    max: 100,
    message: "Trop de requÃªtes, rÃ©essayez plus tard."
});
app.use(limiter);

// ðŸ“Œ Importation des Routes avec `io` si nÃ©cessaire
const authRoutes = require("./routes/authRoutes");
const rideRoutes = require("./routes/rideRoutes");
const vehicleRoutes = require("./routes/vehicleRoutes");
const verificationRoutes = require("./routes/verificationRoutes");
const reviewRoutes = require("./routes/reviewRoutes");
const paymentRoutes = require("./routes/paymentRoutes");
const notificationRoutes = require("./routes/notificationRoutes")(io); // âœ… io passÃ©
const emergencyRoutes = require("./routes/emergencyRoutes");
const historyRoutes = require("./routes/historyRoutes");
const reportRoutes = require("./routes/reportRoutes");
const settingsRoutes = require("./routes/settingsRoutes");
const qrCodeRoutes = require("./routes/qrCodeRoutes");
const userRoutes = require("./routes/userRoutes");
const userLocationRoutes = require("./routes/userLocationRoutes")(io); // âœ… io passÃ©
const adminDashboardRoutes = require("./routes/adminDashboardRoutes");

// âœ… Association des Routes
app.use("/api/auth", authRoutes);
app.use("/api/rides", rideRoutes);
app.use("/api/vehicles", vehicleRoutes);
app.use("/api/verification", verificationRoutes);
app.use("/api/reviews", reviewRoutes);
app.use("/api/payments", paymentRoutes);
app.use("/api/notifications", notificationRoutes);
app.use("/api/emergency", emergencyRoutes);
app.use("/api/history", historyRoutes);
app.use("/api/reports", reportRoutes);
app.use("/api/settings", settingsRoutes);
app.use("/api/qrcodes", qrCodeRoutes);
app.use("/api/users", userRoutes);
app.use("/api/location", userLocationRoutes);
app.use("/api/admin", adminDashboardRoutes);

// ðŸ“¡ Gestion des WebSockets
let connectedUsers = {};
let driverLocations = {}; // Stockage des positions des chauffeurs en temps rÃ©el

io.on("connection", (socket) => {
    console.log("ðŸŸ¢ Utilisateur connectÃ© :", socket.id);

    // âœ… Association du socket Ã  un utilisateur
    socket.on("userConnected", (userId) => {
        if (!userId) return;
        connectedUsers[userId] = socket.id;
        console.log(`âœ… Utilisateur ${userId} associÃ© Ã  Socket ID : ${socket.id}`);
        socket.join(`user_${userId}`);
    });

    // âœ… Mise Ã  jour de la position du chauffeur
    socket.on("updateLocation", async ({ userId, latitude, longitude }) => {
        if (!userId || !latitude || !longitude) return;

        try {
            // Mise Ã  jour dans la base de donnÃ©es
            await db.query(
                `INSERT INTO user_location (user_id, latitude, longitude) 
                 VALUES (?, ?, ?) 
                 ON DUPLICATE KEY UPDATE latitude = VALUES(latitude), longitude = VALUES(longitude), last_updated = NOW()`,
                [userId, latitude, longitude]
            );

            // Diffuser la mise Ã  jour aux passagers
            io.emit("locationUpdated", { userId, latitude, longitude });
        } catch (error) {
            console.error("ðŸ”¥ Erreur lors de la mise Ã  jour de la position :", error);
        }
    });

    // âœ… DÃ©connexion de l'utilisateur
    socket.on("disconnect", () => {
        const userId = Object.keys(connectedUsers).find(key => connectedUsers[key] === socket.id);
        if (userId) {
            delete connectedUsers[userId];
            console.log(`ðŸ”´ Utilisateur ${userId} dÃ©connectÃ©`);
        }
    });
});

// âœ… Fonction Globale d'Envoi de Notifications
const sendNotification = async (userId, title, message) => {
    try {
        // ðŸ“¡ Envoi en temps rÃ©el si l'utilisateur est connectÃ©
        if (connectedUsers[userId]) {
            io.to(connectedUsers[userId]).emit("newNotification", { title, message });
        }

        // Sauvegarde en base de donnÃ©es
        await db.query(
            `INSERT INTO notifications (user_id, title, message, is_read, created_at) 
             VALUES (?, ?, ?, false, NOW())`,
            [userId, title, message]
        );
    } catch (error) {
        console.error("ðŸ”¥ Erreur envoi notification :", error);
    }
};

// âœ… Middleware Global de Gestion des Erreurs
app.use((err, req, res, next) => {
    console.error("ðŸ”¥ Erreur Serveur :", err.stack);
    res.status(500).json({ message: "Erreur interne du serveur." });
});

// âœ… Route de Test
app.get("/", (req, res) => {
    res.send("ðŸš€ Backend Taxi API is running!");
});

// âœ… DÃ©marrage du Serveur
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
    console.log(`âœ… Serveur dÃ©marrÃ© sur le port ${PORT}`);
    console.log(`ðŸ“„ Documentation disponible sur http://localhost:${PORT}/api-docs`);
});

// âœ… Export des Modules
module.exports = { app, server, io, sendNotification };
